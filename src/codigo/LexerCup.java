/* The following code was generated by JFlex 1.6.1 */

package codigo;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/NETO/Documents/NetBeansProjects/AnalizadorProyecto_Compi/src/codigo/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\11\1\55\1\55\1\11\22\0\1\10\1\0\1\47"+
    "\1\5\2\0\1\50\1\0\1\42\1\43\1\35\1\45\1\40\1\46"+
    "\1\4\1\7\12\2\1\37\1\44\1\0\1\41\1\0\1\5\1\3"+
    "\1\24\1\25\1\23\1\27\1\22\1\21\1\34\1\15\1\12\2\1"+
    "\1\20\1\17\1\13\1\30\1\33\1\1\1\32\1\36\1\16\1\31"+
    "\4\1\1\26\4\0\1\14\1\0\7\1\1\1\3\1\1\1\1\1"+
    "\1\1\1\53\1\1\1\51\2\1\1\54\1\52\1\1\1\6\3\1"+
    "\12\0\1\55\u1fa2\0\1\55\1\55\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\2\1\4\1\5\11\2"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\1\3\0\17\2\4\0\1\2\1\17\6\2"+
    "\1\20\13\2\4\0\1\2\2\0\6\2\1\0\10\2"+
    "\3\0\1\21\2\0\6\2\2\0\6\2\1\22\6\0"+
    "\3\2\1\23\5\0\1\24\3\2\1\25\1\2\2\0"+
    "\1\21\1\26\2\0\1\2\1\27\6\0\1\2\1\30"+
    "\1\0\1\31\3\0\1\32\1\0\1\33\3\0\1\34"+
    "\1\35\1\36\1\2\4\0\2\26\1\0\1\37\1\40"+
    "\1\41\1\2\4\0\1\42\1\2\1\43\1\44\1\0"+
    "\1\45\1\0\1\46\4\0\1\47\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\56\0\346\0\u0114"+
    "\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284"+
    "\0\u02b2\0\56\0\56\0\56\0\56\0\56\0\56\0\56"+
    "\0\56\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4"+
    "\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564"+
    "\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4"+
    "\0\u0702\0\u036a\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816"+
    "\0\134\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958"+
    "\0\u0986\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8"+
    "\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38"+
    "\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8"+
    "\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18"+
    "\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088"+
    "\0\u10b6\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c\0\134\0\u11ca"+
    "\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a"+
    "\0\134\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420\0\134\0\u144e"+
    "\0\u147c\0\u14aa\0\56\0\u14d8\0\u1506\0\u1534\0\u1254\0\u1562"+
    "\0\u1590\0\u15be\0\u15ec\0\134\0\u161a\0\u1648\0\u1676\0\u16a4"+
    "\0\u16d2\0\u1700\0\u172e\0\134\0\u175c\0\56\0\u178a\0\u17b8"+
    "\0\u17e6\0\56\0\u1814\0\134\0\u1842\0\u1870\0\u189e\0\56"+
    "\0\56\0\56\0\u18cc\0\u18fa\0\u1928\0\u1956\0\u1984\0\u19b2"+
    "\0\u17e6\0\u19e0\0\56\0\56\0\56\0\u1a0e\0\u1a3c\0\u1a6a"+
    "\0\u1a98\0\u1ac6\0\56\0\u1af4\0\56\0\56\0\u1b22\0\56"+
    "\0\u1b50\0\56\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\56\0\56";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\3\2\1\5\1\6\2\7\1\10"+
    "\1\11\1\2\1\3\1\12\1\3\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\7\3\1\21\1\3\1\2\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\4\3\60\0\2\3\1\33\2\0\1\3\1\0\1\34"+
    "\1\0\2\3\1\0\20\3\1\0\1\3\12\0\4\3"+
    "\3\0\1\4\1\0\1\35\52\0\2\3\1\33\2\0"+
    "\1\36\1\0\1\34\1\0\2\3\1\0\20\3\1\0"+
    "\1\3\12\0\4\3\11\0\2\7\45\0\2\3\1\33"+
    "\2\0\1\3\1\0\1\34\1\0\1\3\1\37\1\0"+
    "\2\3\1\40\15\3\1\0\1\3\12\0\4\3\2\0"+
    "\2\3\1\33\2\0\1\3\1\0\1\34\1\0\2\3"+
    "\1\0\5\3\1\41\5\3\1\42\4\3\1\0\1\3"+
    "\12\0\4\3\2\0\2\3\1\33\2\0\1\3\1\0"+
    "\1\34\1\0\1\43\1\3\1\0\7\3\1\44\10\3"+
    "\1\0\1\3\12\0\4\3\2\0\2\3\1\33\2\0"+
    "\1\3\1\0\1\34\1\0\1\45\1\3\1\0\20\3"+
    "\1\0\1\3\12\0\4\3\2\0\2\3\1\33\2\0"+
    "\1\3\1\0\1\34\1\0\1\46\1\3\1\0\20\3"+
    "\1\0\1\3\12\0\4\3\2\0\2\3\1\33\2\0"+
    "\1\3\1\0\1\34\1\0\1\3\1\47\1\0\20\3"+
    "\1\0\1\3\12\0\4\3\2\0\2\3\1\33\2\0"+
    "\1\3\1\0\1\34\1\0\2\3\1\0\13\3\1\50"+
    "\1\51\3\3\1\0\1\3\12\0\4\3\2\0\2\3"+
    "\1\33\2\0\1\3\1\0\1\34\1\0\1\3\1\52"+
    "\1\0\3\3\1\53\14\3\1\0\1\3\12\0\4\3"+
    "\2\0\2\3\1\33\2\0\1\3\1\0\1\34\1\0"+
    "\2\3\1\0\13\3\1\54\4\3\1\0\1\3\12\0"+
    "\4\3\13\0\1\55\5\0\1\56\106\0\1\57\5\0"+
    "\1\60\4\0\1\60\3\0\2\60\1\0\20\60\1\0"+
    "\1\60\12\0\4\60\2\0\1\61\4\0\1\61\3\0"+
    "\2\61\1\0\20\61\1\0\1\61\12\0\4\61\3\0"+
    "\1\62\54\0\2\3\1\33\2\0\1\63\1\0\1\34"+
    "\1\0\2\3\1\0\20\3\1\0\1\3\12\0\4\3"+
    "\2\0\2\3\1\33\2\0\1\3\1\0\1\34\1\0"+
    "\1\64\1\3\1\0\20\3\1\0\1\3\12\0\4\3"+
    "\2\0\2\3\1\33\2\0\1\3\1\0\1\34\1\0"+
    "\2\3\1\0\7\3\1\65\6\3\1\66\1\3\1\0"+
    "\1\3\12\0\4\3\2\0\2\3\1\33\2\0\1\3"+
    "\1\0\1\34\1\0\2\3\1\0\17\3\1\67\1\0"+
    "\1\3\12\0\4\3\2\0\2\3\1\33\2\0\1\3"+
    "\1\0\1\34\1\0\2\3\1\0\2\3\1\70\15\3"+
    "\1\0\1\3\12\0\4\3\2\0\2\3\1\33\2\0"+
    "\1\3\1\0\1\34\1\0\2\3\1\0\1\3\1\71"+
    "\16\3\1\0\1\3\12\0\4\3\2\0\2\3\1\33"+
    "\2\0\1\3\1\0\1\34\1\0\2\3\1\0\10\3"+
    "\1\72\7\3\1\0\1\3\12\0\4\3\2\0\2\3"+
    "\1\33\2\0\1\3\1\0\1\34\1\0\2\3\1\0"+
    "\20\3\1\0\1\73\12\0\4\3\2\0\2\3\1\33"+
    "\2\0\1\3\1\0\1\34\1\0\1\3\1\74\1\0"+
    "\3\3\1\75\14\3\1\0\1\3\12\0\4\3\2\0"+
    "\2\3\1\33\2\0\1\3\1\0\1\34\1\0\2\3"+
    "\1\0\3\3\1\76\2\3\1\77\11\3\1\0\1\3"+
    "\12\0\4\3\2\0\2\3\1\33\2\0\1\3\1\0"+
    "\1\34\1\0\2\3\1\0\3\3\1\100\14\3\1\0"+
    "\1\3\12\0\4\3\2\0\2\3\1\33\2\0\1\3"+
    "\1\0\1\34\1\0\2\3\1\0\5\3\1\101\12\3"+
    "\1\0\1\3\12\0\4\3\2\0\2\3\1\33\2\0"+
    "\1\3\1\0\1\34\1\0\2\3\1\0\6\3\1\102"+
    "\11\3\1\0\1\3\12\0\4\3\2\0\2\3\1\33"+
    "\2\0\1\3\1\0\1\34\1\0\2\3\1\0\1\3"+
    "\1\103\16\3\1\0\1\3\12\0\4\3\2\0\2\3"+
    "\1\33\2\0\1\3\1\0\1\34\1\0\2\3\1\0"+
    "\15\3\1\104\2\3\1\0\1\3\12\0\4\3\20\0"+
    "\1\105\50\0\1\106\115\0\1\107\4\0\2\60\1\0"+
    "\1\110\1\0\1\60\3\0\2\60\1\0\20\60\1\0"+
    "\1\60\12\0\4\60\2\0\1\111\1\61\3\0\1\111"+
    "\3\0\2\111\1\0\20\111\1\0\1\111\12\0\4\111"+
    "\2\0\2\3\1\33\1\112\1\0\1\3\1\0\1\34"+
    "\1\0\2\3\1\0\20\3\1\0\1\3\12\0\4\3"+
    "\2\0\2\3\1\33\2\0\1\3\1\0\1\34\1\0"+
    "\2\3\1\113\20\3\1\0\1\3\12\0\4\3\2\0"+
    "\2\3\1\33\2\0\1\3\1\0\1\34\1\0\2\3"+
    "\1\0\17\3\1\114\1\0\1\3\12\0\4\3\2\0"+
    "\2\3\1\33\2\0\1\3\1\0\1\34\1\0\2\3"+
    "\1\0\15\3\1\115\2\3\1\0\1\3\12\0\4\3"+
    "\2\0\2\3\1\33\2\0\1\3\1\0\1\34\1\0"+
    "\2\3\1\0\15\3\1\116\2\3\1\0\1\3\12\0"+
    "\4\3\2\0\2\3\1\33\2\0\1\3\1\0\1\34"+
    "\1\0\2\3\1\0\10\3\1\117\7\3\1\0\1\3"+
    "\12\0\4\3\2\0\2\3\1\33\2\0\1\3\1\0"+
    "\1\34\1\0\2\3\1\0\3\3\1\120\14\3\1\0"+
    "\1\3\12\0\4\3\2\0\2\3\1\33\2\0\1\3"+
    "\1\0\1\34\1\0\2\3\1\0\1\3\1\121\16\3"+
    "\1\0\1\3\12\0\4\3\2\0\2\3\1\33\2\0"+
    "\1\3\1\0\1\34\1\0\2\3\1\122\20\3\1\0"+
    "\1\3\12\0\4\3\2\0\2\3\1\33\2\0\1\3"+
    "\1\0\1\34\1\0\2\3\1\0\7\3\1\123\10\3"+
    "\1\0\1\3\12\0\4\3\2\0\2\3\1\33\2\0"+
    "\1\3\1\0\1\34\1\0\2\3\1\0\7\3\1\124"+
    "\10\3\1\0\1\3\12\0\4\3\2\0\2\3\1\33"+
    "\2\0\1\3\1\0\1\34\1\0\2\3\1\0\7\3"+
    "\1\125\10\3\1\0\1\3\12\0\4\3\2\0\2\3"+
    "\1\33\2\0\1\3\1\0\1\34\1\0\2\3\1\0"+
    "\14\3\1\126\3\3\1\0\1\3\12\0\4\3\2\0"+
    "\2\3\1\33\2\0\1\3\1\0\1\34\1\0\2\3"+
    "\1\0\15\3\1\127\2\3\1\0\1\3\12\0\4\3"+
    "\2\0\2\3\1\33\2\0\1\3\1\0\1\34\1\0"+
    "\2\3\1\0\1\130\17\3\1\0\1\3\12\0\4\3"+
    "\2\0\2\3\1\33\2\0\1\3\1\0\1\34\1\0"+
    "\2\3\1\0\14\3\1\131\3\3\1\0\1\3\12\0"+
    "\4\3\2\0\2\3\1\33\2\0\1\3\1\0\1\34"+
    "\1\0\2\3\1\0\12\3\1\132\5\3\1\0\1\3"+
    "\12\0\4\3\25\0\1\133\67\0\1\134\72\0\1\135"+
    "\3\0\1\136\4\0\1\136\3\0\2\136\1\0\20\136"+
    "\1\0\1\136\12\0\4\136\2\0\2\111\3\0\1\111"+
    "\1\0\1\34\1\0\2\111\1\0\20\111\1\0\1\111"+
    "\12\0\4\111\2\0\1\137\4\0\1\137\3\0\2\137"+
    "\1\0\20\137\1\0\1\137\12\0\4\137\16\0\1\140"+
    "\41\0\2\3\1\33\2\0\1\3\1\0\1\34\1\0"+
    "\2\3\1\0\5\3\1\141\12\3\1\0\1\3\12\0"+
    "\4\3\2\0\2\3\1\33\2\0\1\3\1\0\1\34"+
    "\1\0\1\142\1\3\1\0\20\3\1\0\1\3\12\0"+
    "\4\3\2\0\2\3\1\33\2\0\1\3\1\0\1\34"+
    "\1\0\1\143\1\3\1\0\20\3\1\0\1\3\12\0"+
    "\4\3\2\0\2\3\1\33\2\0\1\3\1\0\1\34"+
    "\1\0\2\3\1\0\15\3\1\144\2\3\1\0\1\3"+
    "\12\0\4\3\2\0\2\3\1\33\2\0\1\3\1\0"+
    "\1\34\1\0\2\3\1\0\7\3\1\145\10\3\1\0"+
    "\1\3\12\0\4\3\2\0\2\3\1\33\2\0\1\3"+
    "\1\0\1\34\1\0\2\3\1\0\7\3\1\146\10\3"+
    "\1\0\1\3\12\0\4\3\16\0\1\147\41\0\2\3"+
    "\1\33\2\0\1\3\1\0\1\34\1\0\2\3\1\150"+
    "\20\3\1\0\1\3\12\0\4\3\2\0\2\3\1\33"+
    "\2\0\1\3\1\0\1\34\1\0\2\3\1\0\6\3"+
    "\1\151\11\3\1\0\1\3\12\0\4\3\2\0\2\3"+
    "\1\33\2\0\1\3\1\0\1\34\1\0\2\3\1\0"+
    "\10\3\1\152\7\3\1\0\1\3\12\0\4\3\2\0"+
    "\2\3\1\33\2\0\1\3\1\0\1\34\1\0\2\3"+
    "\1\0\2\3\1\153\15\3\1\0\1\3\12\0\4\3"+
    "\2\0\2\3\1\33\2\0\1\3\1\0\1\34\1\0"+
    "\2\3\1\0\16\3\1\154\1\3\1\0\1\3\12\0"+
    "\4\3\2\0\2\3\1\33\2\0\1\3\1\0\1\34"+
    "\1\0\2\3\1\0\13\3\1\155\4\3\1\0\1\3"+
    "\12\0\4\3\2\0\2\3\1\33\2\0\1\3\1\0"+
    "\1\34\1\0\2\3\1\0\15\3\1\156\2\3\1\0"+
    "\1\3\12\0\4\3\2\0\2\3\1\33\2\0\1\3"+
    "\1\0\1\34\1\0\2\3\1\0\5\3\1\157\12\3"+
    "\1\0\1\3\12\0\4\3\35\0\1\160\37\0\1\161"+
    "\113\0\1\162\2\0\1\136\2\0\1\163\1\0\1\136"+
    "\3\0\2\136\1\0\20\136\1\0\1\136\12\0\4\136"+
    "\2\0\2\137\1\0\1\164\1\0\1\137\3\0\2\137"+
    "\1\0\20\137\1\0\1\137\12\0\4\137\17\0\1\165"+
    "\40\0\2\3\1\33\2\0\1\3\1\0\1\34\1\0"+
    "\1\3\1\166\1\0\20\3\1\0\1\3\12\0\4\3"+
    "\2\0\2\3\1\33\2\0\1\3\1\0\1\34\1\0"+
    "\2\3\1\0\2\3\1\167\15\3\1\0\1\3\12\0"+
    "\4\3\2\0\2\3\1\33\2\0\1\3\1\0\1\34"+
    "\1\0\2\3\1\0\1\3\1\170\16\3\1\0\1\3"+
    "\12\0\4\3\2\0\2\3\1\33\2\0\1\3\1\0"+
    "\1\34\1\0\2\3\1\0\5\3\1\171\12\3\1\0"+
    "\1\3\12\0\4\3\2\0\2\3\1\33\2\0\1\3"+
    "\1\0\1\34\1\0\2\3\1\172\20\3\1\0\1\3"+
    "\12\0\4\3\2\0\2\3\1\33\2\0\1\3\1\0"+
    "\1\34\1\0\2\3\1\173\20\3\1\0\1\3\12\0"+
    "\4\3\17\0\1\174\51\0\1\175\6\0\1\176\35\0"+
    "\2\3\1\33\2\0\1\3\1\0\1\34\1\0\2\3"+
    "\1\0\5\3\1\177\12\3\1\0\1\3\12\0\4\3"+
    "\2\0\2\3\1\33\2\0\1\3\1\0\1\34\1\0"+
    "\2\3\1\0\5\3\1\200\12\3\1\0\1\3\12\0"+
    "\4\3\2\0\2\3\1\33\2\0\1\3\1\0\1\34"+
    "\1\0\1\3\1\201\1\0\20\3\1\0\1\3\12\0"+
    "\4\3\2\0\2\3\1\33\2\0\1\3\1\0\1\34"+
    "\1\0\2\3\1\0\13\3\1\202\4\3\1\0\1\3"+
    "\12\0\4\3\2\0\2\3\1\33\2\0\1\3\1\0"+
    "\1\34\1\0\2\3\1\0\20\3\1\0\1\3\1\203"+
    "\11\0\4\3\2\0\2\3\1\33\2\0\1\3\1\0"+
    "\1\34\1\0\2\3\1\0\7\3\1\204\10\3\1\0"+
    "\1\3\12\0\4\3\23\0\1\205\57\0\1\206\75\0"+
    "\1\31\12\0\1\207\4\0\1\207\3\0\2\207\1\0"+
    "\20\207\1\0\1\207\12\0\4\207\2\0\1\210\4\0"+
    "\1\210\3\0\2\210\1\0\20\210\1\0\1\210\12\0"+
    "\4\210\20\0\1\211\37\0\2\3\1\33\2\0\1\3"+
    "\1\0\1\34\1\0\2\3\1\212\20\3\1\0\1\3"+
    "\12\0\4\3\2\0\2\3\1\33\2\0\1\3\1\0"+
    "\1\34\1\0\1\213\1\3\1\0\20\3\1\0\1\3"+
    "\12\0\4\3\2\0\2\3\1\33\2\0\1\3\1\0"+
    "\1\34\1\0\2\3\1\0\7\3\1\214\10\3\1\0"+
    "\1\3\12\0\4\3\13\0\1\215\6\0\1\216\46\0"+
    "\1\217\62\0\1\220\51\0\1\221\54\0\1\222\44\0"+
    "\2\3\1\33\2\0\1\3\1\0\1\34\1\0\2\3"+
    "\1\0\11\3\1\223\6\3\1\0\1\3\12\0\4\3"+
    "\2\0\2\3\1\33\2\0\1\3\1\0\1\34\1\0"+
    "\2\3\1\0\7\3\1\224\10\3\1\0\1\3\12\0"+
    "\4\3\2\0\2\3\1\33\2\0\1\3\1\0\1\34"+
    "\1\0\2\3\1\225\20\3\1\0\1\3\12\0\4\3"+
    "\2\0\2\3\1\33\2\0\1\3\1\0\1\34\1\0"+
    "\2\3\1\0\20\3\1\0\1\3\1\226\11\0\4\3"+
    "\14\0\1\227\56\0\1\230\42\0\1\210\4\0\1\210"+
    "\1\231\2\0\2\210\1\0\20\210\1\0\1\210\12\0"+
    "\4\210\21\0\1\232\47\0\1\233\44\0\2\3\1\33"+
    "\2\0\1\3\1\0\1\34\1\0\2\3\1\0\15\3"+
    "\1\234\2\3\1\0\1\3\12\0\4\3\14\0\1\235"+
    "\54\0\1\236\56\0\1\237\62\0\1\240\47\0\1\241"+
    "\56\0\1\242\43\0\2\3\1\33\2\0\1\3\1\0"+
    "\1\34\1\0\2\3\1\0\7\3\1\243\10\3\1\0"+
    "\1\3\12\0\4\3\13\0\1\244\6\0\1\245\50\0"+
    "\1\246\62\0\1\247\35\0\1\250\2\0\2\251\1\250"+
    "\1\251\2\0\2\250\1\0\20\250\1\0\1\250\2\0"+
    "\1\251\4\0\1\251\2\0\4\250\14\0\1\252\54\0"+
    "\1\253\56\0\1\254\54\0\1\255\44\0\2\3\1\33"+
    "\2\0\1\3\1\0\1\34\1\0\2\3\1\0\12\3"+
    "\1\256\5\3\1\0\1\3\12\0\4\3\14\0\1\257"+
    "\54\0\1\260\64\0\1\261\46\0\1\262\44\0\2\250"+
    "\1\0\2\251\1\250\1\251\2\0\2\250\1\0\20\250"+
    "\1\0\1\250\2\0\1\251\4\0\1\251\2\0\4\250"+
    "\13\0\1\263\44\0\2\3\1\33\2\0\1\3\1\0"+
    "\1\34\1\0\2\3\1\0\13\3\1\264\4\3\1\0"+
    "\1\3\12\0\4\3\13\0\1\265\56\0\1\266\54\0"+
    "\1\267\56\0\1\270\43\0\2\3\1\33\2\0\1\3"+
    "\1\0\1\34\1\0\2\3\1\271\20\3\1\0\1\3"+
    "\12\0\4\3\14\0\1\272\54\0\1\273\6\0\1\274"+
    "\47\0\1\275\54\0\1\276\55\0\1\277\56\0\1\300"+
    "\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7222];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\13\1\10\11\1\1\3\0"+
    "\17\1\4\0\24\1\4\0\1\1\2\0\6\1\1\0"+
    "\10\1\3\0\1\1\2\0\6\1\2\0\7\1\6\0"+
    "\4\1\5\0\4\1\1\11\1\1\2\0\2\1\2\0"+
    "\2\1\6\0\2\1\1\0\1\11\3\0\1\11\1\0"+
    "\1\1\3\0\3\11\1\1\4\0\2\1\1\0\3\11"+
    "\1\1\4\0\1\11\1\1\2\11\1\0\1\11\1\0"+
    "\1\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol symbol (int type, Object value){
        return new Symbol (type, yyline, yycolumn, value);
    }

    private Symbol symbol (int type){
        return new Symbol (type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.error, yychar, yyline, yytext());
            }
          case 41: break;
          case 2: 
            { return new Symbol(sym.dato, yychar, yyline, yytext());
            }
          case 42: break;
          case 3: 
            { return new Symbol(sym.number_int, yychar, yyline, yytext());
            }
          case 43: break;
          case 4: 
            { return new Symbol(sym.division, yychar, yyline, yytext());
            }
          case 44: break;
          case 5: 
            { /*Ignore*/
            }
          case 45: break;
          case 6: 
            { return new Symbol(sym.producto, yychar, yyline, yytext());
            }
          case 46: break;
          case 7: 
            { return new Symbol(sym.coma, yychar, yyline, yytext());
            }
          case 47: break;
          case 8: 
            { return new Symbol(sym.igual, yychar, yyline, yytext());
            }
          case 48: break;
          case 9: 
            { return new Symbol(sym.parentesis_a, yychar, yyline, yytext());
            }
          case 49: break;
          case 10: 
            { return new Symbol(sym.parentesis_c, yychar, yyline, yytext());
            }
          case 50: break;
          case 11: 
            { return new Symbol(sym.punto_coma, yychar, yyline, yytext());
            }
          case 51: break;
          case 12: 
            { return new Symbol(sym.suma, yychar, yyline, yytext());
            }
          case 52: break;
          case 13: 
            { return new Symbol(sym.resta, yychar, yyline, yytext());
            }
          case 53: break;
          case 14: 
            { return new Symbol(sym.comillas, yychar, yyline, yytext());
            }
          case 54: break;
          case 15: 
            { return new Symbol(sym.number_float, yychar, yyline, yytext());
            }
          case 55: break;
          case 16: 
            { return new Symbol(sym.titulo, yychar, yyline, yytext());
            }
          case 56: break;
          case 17: 
            { return new Symbol(sym.email, yychar, yyline, yytext());
            }
          case 57: break;
          case 18: 
            { return new Symbol(sym.border, yychar, yyline, yytext());
            }
          case 58: break;
          case 19: 
            { return new Symbol(sym.name, yychar, yyline, yytext());
            }
          case 59: break;
          case 20: 
            { return new Symbol(sym.url, yychar, yyline, yytext());
            }
          case 60: break;
          case 21: 
            { return new Symbol(sym.width, yychar, yyline, yytext());
            }
          case 61: break;
          case 22: 
            { return new Symbol(sym.webpage, yychar, yyline, yytext());
            }
          case 62: break;
          case 23: 
            { return new Symbol(sym.bold_font, yychar, yyline, yytext());
            }
          case 63: break;
          case 24: 
            { return new Symbol(sym.column, yychar, yyline, yytext());
            }
          case 64: break;
          case 25: 
            { return new Symbol(sym.height, yychar, yyline, yytext());
            }
          case 65: break;
          case 26: 
            { return new Symbol(sym.html_a, yychar, yyline, yytext());
            }
          case 66: break;
          case 27: 
            { return new Symbol(sym.print, yychar, yyline, yytext());
            }
          case 67: break;
          case 28: 
            { return new Symbol(sym.html_c, yychar, yyline, yytext());
            }
          case 68: break;
          case 29: 
            { return new Symbol(sym.row_a, yychar, yyline, yytext());
            }
          case 69: break;
          case 30: 
            { return new Symbol(sym.row_c, yychar, yyline, yytext());
            }
          case 70: break;
          case 31: 
            { return new Symbol(sym.table_a, yychar, yyline, yytext());
            }
          case 71: break;
          case 32: 
            { return new Symbol(sym.table_c, yychar, yyline, yytext());
            }
          case 72: break;
          case 33: 
            { return new Symbol(sym.list_a, yychar, yyline, yytext());
            }
          case 73: break;
          case 34: 
            { return new Symbol(sym.image_a, yychar, yyline, yytext());
            }
          case 74: break;
          case 35: 
            { return new Symbol(sym.body_a, yychar, yyline, yytext());
            }
          case 75: break;
          case 36: 
            { return new Symbol(sym.body_c, yychar, yyline, yytext());
            }
          case 76: break;
          case 37: 
            { return new Symbol(sym.list_c, yychar, yyline, yytext());
            }
          case 77: break;
          case 38: 
            { return new Symbol(sym.image_c, yychar, yyline, yytext());
            }
          case 78: break;
          case 39: 
            { return new Symbol(sym.head_a, yychar, yyline, yytext());
            }
          case 79: break;
          case 40: 
            { return new Symbol(sym.head_c, yychar, yyline, yytext());
            }
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
